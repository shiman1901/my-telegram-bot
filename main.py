import logging
import asyncio
import time
from telegram import Update, InputMediaPhoto, InputMediaVideo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
BOT_TOKEN = "7723918807:AAFPfwLnRFi1-4jGfeNk4j6AVaKZ9mauw6I"
CHANNEL_ID = -1003154844765
YOUR_ADMIN_ID = 5610556402  # –¢–≤–æ–π Telegram ID

POST_COOLDOWN = 30 * 60  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –•–†–ê–ù–ò–õ–ò–©–ê ===
album_buffer = {}
last_post_time = {}
active_album_tasks = set()

# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –∞–ª—å–±–æ–º—ã ‚Äî –≤—Å—ë –ø–æ–ø–∞–¥—ë—Ç –≤ –∫–∞–Ω–∞–ª.\n"
        "‚ö†Ô∏è –õ–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1 –ø–æ—Å—Ç –≤ 30 –º–∏–Ω—É—Ç.\n\n"
        "üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã (‚ñà, ‚ñì, ‚îÇ, ‚îÄ) –≤–º–µ—Å—Ç–æ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω—ã—Ö –±–∞—Ä–æ–≤ ‚Äî —Ç–∞–∫ –æ–Ω–∏ –Ω–µ –ø—Ä–µ–≤—Ä–∞—Ç—è—Ç—Å—è –≤ —Ä–µ–∞–∫—Ü–∏–∏."
    )
    await update.message.reply_text(text)


async def pin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != YOUR_ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    try:
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [[InlineKeyboardButton("–ü–û–°–¢", url="https://t.me/CHA2M_bot")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        sent = await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text="üì© –•–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!",
            reply_markup=reply_markup
        )
        await update.message.reply_text(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!\n"
            f"–ó–∞–∫—Ä–µ–ø–∏ –µ–≥–æ –≤ –∫–∞–Ω–∞–ª–µ (ID: {sent.message_id})."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /pin: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª.")


# === –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or not update.effective_message:
        return

    user_id = user.id
    message = update.effective_message
    current_time = time.time()
    is_admin = (user_id == YOUR_ADMIN_ID)

    try:
        # === –ê–õ–¨–ë–û–ú ===
        if message.media_group_id:
            group_id = message.media_group_id

            if not is_admin and group_id not in album_buffer:
                if user_id in last_post_time:
                    elapsed = current_time - last_post_time[user_id]
                    if elapsed < POST_COOLDOWN:
                        remaining = max(1, int((POST_COOLDOWN - elapsed) // 60))
                        await update.message.reply_text(
                            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {remaining} –º–∏–Ω. –õ–∏–º–∏—Ç: 1 –ø–æ—Å—Ç –≤ 30 –º–∏–Ω—É—Ç."
                        )
                        return
                last_post_time[user_id] = current_time

            if group_id not in album_buffer:
                album_buffer[group_id] = []
            album_buffer[group_id].append(message)

            if group_id not in active_album_tasks:
                active_album_tasks.add(group_id)
                asyncio.create_task(
                    send_album_later_with_notification(group_id, context, message)
                )

        # === –û–î–ò–ù–û–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===
        else:
            if not is_admin:
                if user_id in last_post_time:
                    elapsed = current_time - last_post_time[user_id]
                    if elapsed < POST_COOLDOWN:
                        remaining = max(1, int((POST_COOLDOWN - elapsed) // 60))
                        await update.message.reply_text(
                            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {remaining} –º–∏–Ω. –õ–∏–º–∏—Ç: 1 –ø–æ—Å—Ç –≤ 30 –º–∏–Ω—É—Ç."
                        )
                        return
                last_post_time[user_id] = current_time

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ forward ‚Äî —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "–æ—Ç –∫–æ–≥–æ"
            try:
                if message.text is not None:
                    await context.bot.send_message(
                        chat_id=CHANNEL_ID,
                        text=message.text,
                        parse_mode=None  # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å: —ç–º–æ–¥–∑–∏, —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–±–µ–ª—ã
                    )
                elif message.photo:
                    await context.bot.send_photo(
                        chat_id=CHANNEL_ID,
                        photo=message.photo[-1].file_id,
                        caption=message.caption
                    )
                elif message.video:
                    await context.bot.send_video(
                        chat_id=CHANNEL_ID,
                        video=message.video.file_id,
                        caption=message.caption
                    )
                elif message.document:
                    await context.bot.send_document(
                        chat_id=CHANNEL_ID,
                        document=message.document.file_id,
                        caption=message.caption
                    )
                elif message.sticker:
                    await context.bot.send_sticker(
                        chat_id=CHANNEL_ID,
                        sticker=message.sticker.file_id
                    )
                else:
                    # fallback: –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                    await context.bot.forward_message(
                        chat_id=CHANNEL_ID,
                        from_chat_id=update.effective_chat.id,
                        message_id=message.message_id
                    )

                await update.message.reply_text("‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ handle_message –æ—Ç user={user_id}: {e}")
        try:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç.")
        except:
            pass


# === –û–¢–ü–†–ê–í–ö–ê –ê–õ–¨–ë–û–ú–ê ===
async def send_album_later_with_notification(group_id: str, context: ContextTypes.DEFAULT_TYPE, first_msg):
    await asyncio.sleep(1.3)

    if group_id not in album_buffer:
        active_album_tasks.discard(group_id)
        return

    messages = album_buffer.pop(group_id)
    active_album_tasks.discard(group_id)

    if not messages:
        return

    media = []
    for msg in messages:
        if msg.photo:
            file_id = msg.photo[-1].file_id
            media.append(InputMediaPhoto(media=file_id, caption=msg.caption))
        elif msg.video:
            media.append(InputMediaVideo(media=msg.video.file_id, caption=msg.caption))

    if not media:
        try:
            await messages[-1].reply_text("‚ùå –ê–ª—å–±–æ–º –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.")
        except:
            pass
        return

    try:
        await context.bot.send_media_group(chat_id=CHANNEL_ID, media=media)
        await messages[-1].reply_text("‚úÖ –ê–ª—å–±–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞ {group_id}: {e}")
        try:
            await messages[-1].reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª—å–±–æ–º. –§–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º–∏.")
        except:
            pass


# === –ó–ê–ü–£–°–ö ===
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("pin", pin))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: –∞–¥–º–∏–Ω –±–µ–∑ –ª–∏–º–∏—Ç–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äî 1 –ø–æ—Å—Ç/30 –º–∏–Ω, –∞–ª—å–±–æ–º—ã, /pin")
    application.run_polling()


if __name__ == '__main__':
    main()

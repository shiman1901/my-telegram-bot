import logging
import asyncio
import time
import pytz
from telegram import Update, InputMediaPhoto, InputMediaVideo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
BOT_TOKEN = "7723918807:AAFPfwLnRFi1-4jGfeNk4j6AVaKZ9mauw6I"
CHANNEL_ID = -1003154844765
YOUR_ADMIN_ID = 5610556402
POST_COOLDOWN = 10 * 60  # 10 –º–∏–Ω—É—Ç

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –•–†–ê–ù–ò–õ–ò–©–ê ===
album_buffer = {}
last_post_time = {}
active_album_tasks = set()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ –∏–∑ –∫—É–ª–¥–∞—É–Ω–∞
EXEMPTED_USERS = {973206254, 628944825}


# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –∞–ª—å–±–æ–º—ã ‚Äî –≤—Å—ë –ø–æ–ø–∞–¥—ë—Ç –≤ –∫–∞–Ω–∞–ª.\n"
        f"‚ö†Ô∏è –õ–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 1 –ø–æ—Å—Ç –≤ {POST_COOLDOWN // 60} –º–∏–Ω—É—Ç."
    )
    await update.message.reply_text(text)


async def pin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != YOUR_ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    try:
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [[InlineKeyboardButton("–ü–û–°–¢", url="https://t.me/CHA2M_bot  ")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        sent = await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text="üì© –•–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!",
            reply_markup=reply_markup
        )
        await update.message.reply_text(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!\n"
            f"–ó–∞–∫—Ä–µ–ø–∏ –µ–≥–æ –≤ –∫–∞–Ω–∞–ª–µ (ID: {sent.message_id})."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ /pin: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª.")


# === –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or not update.effective_message:
        logger.warning("–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    user_id = user.id
    message = update.effective_message
    current_time = time.time()
    is_exempted = (user_id == YOUR_ADMIN_ID) or (user_id in EXEMPTED_USERS)

    logger.info(
        f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user={user_id} (admin_or_exempted={is_exempted}), "
        f"media_group_id={message.media_group_id}, "
        f"has_photo={bool(message.photo)}, "
        f"has_video={bool(message.video)}, "
        f"has_document={bool(message.document)}"
    )

    # === –ê–õ–¨–ë–û–ú ===
    if message.media_group_id:
        group_id = message.media_group_id
        logger.info(f"üñºÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–ª—å–±–æ–º: media_group_id={group_id}")

        if group_id not in album_buffer:
            album_buffer[group_id] = []
        album_buffer[group_id].append(message)

        if group_id not in active_album_tasks:
            active_album_tasks.add(group_id)
            logger.info(f"‚è±Ô∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞ {group_id}")
            asyncio.create_task(
                send_album_later_with_notification(group_id, context, message, user_id, is_exempted)
            )
        return

    # === –û–î–ò–ù–û–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===
    else:
        if not is_exempted:
            if user_id in last_post_time:
                elapsed = current_time - last_post_time[user_id]
                if elapsed < POST_COOLDOWN:
                    remaining = max(1, int((POST_COOLDOWN - elapsed) // 60))
                    logger.info(f"üïí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç. –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {remaining} –º–∏–Ω.")
                    await update.message.reply_text(
                        f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {remaining} –º–∏–Ω. –õ–∏–º–∏—Ç: 1 –ø–æ—Å—Ç –≤ {POST_COOLDOWN // 60} –º–∏–Ω—É—Ç."
                    )
                    return
            last_post_time[user_id] = current_time

        logger.info(f"üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user={user_id}")
        sent = False
        try:
            if message.text is not None:
                await context.bot.send_message(chat_id=CHANNEL_ID, text=message.text)
                sent = True
            elif message.photo:
                await context.bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=message.photo[-1].file_id,
                    caption=message.caption
                )
                sent = True
            elif message.video:
                await context.bot.send_video(
                    chat_id=CHANNEL_ID,
                    video=message.video.file_id,
                    caption=message.caption
                )
                sent = True
            elif message.document:
                await context.bot.send_document(
                    chat_id=CHANNEL_ID,
                    document=message.document.file_id,
                    caption=message.caption
                )
                sent = True
            elif message.sticker:
                await context.bot.send_sticker(
                    chat_id=CHANNEL_ID,
                    sticker=message.sticker.file_id
                )
                sent = True
            else:
                await context.bot.forward_message(
                    chat_id=CHANNEL_ID,
                    from_chat_id=update.effective_chat.id,
                    message_id=message.message_id
                )
                sent = True

            if sent:
                await update.message.reply_text("‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: user={user_id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user={user_id}: {e}", exc_info=True)
            try:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.")
            except:
                pass


# === –û–¢–ü–†–ê–í–ö–ê –ê–õ–¨–ë–û–ú–ê ===
async def send_album_later_with_notification(group_id: str, context: ContextTypes.DEFAULT_TYPE, first_msg, user_id: int, is_exempted: bool):
    await asyncio.sleep(2.5)

    if group_id not in album_buffer:
        active_album_tasks.discard(group_id)
        return

    messages = album_buffer.pop(group_id)
    active_album_tasks.discard(group_id)

    if not messages:
        return

    current_time = time.time()
    if not is_exempted:
        if user_id in last_post_time:
            elapsed = current_time - last_post_time[user_id]
            if elapsed < POST_COOLDOWN:
                remaining = max(1, int((POST_COOLDOWN - elapsed)))
                logger.info(f"‚è≥ –ê–ª—å–±–æ–º {group_id} –æ—Ç user={user_id} –∂–¥—ë—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞ ({remaining}s).")
                await messages[0].reply_text(
                    f"‚è≥ –ê–ª—å–±–æ–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {remaining} —Å–µ–∫—É–Ω–¥(—ã) –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞."
                )
                await asyncio.sleep(remaining)
                current_time = time.time()
                elapsed = current_time - last_post_time.get(user_id, 0)
                if elapsed < POST_COOLDOWN:
                    logger.error(f"‚ùå –ö—É–ª–¥–∞—É–Ω –≤—Å—ë –µ—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª –¥–ª—è user={user_id} –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è.")
                    await messages[0].reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞.")
                    return

    if not is_exempted:
        last_post_time[user_id] = current_time

    media = []
    for i, msg in enumerate(messages):
        caption = msg.caption if i == 0 else None
        if msg.photo:
            media.append(InputMediaPhoto(media=msg.photo[-1].file_id, caption=caption))
        elif msg.video:
            media.append(InputMediaVideo(media=msg.video.file_id, caption=caption))
        else:
            logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞ –≤ –∞–ª—å–±–æ–º–µ: {msg}")

    logger.info(f"–°–æ–±—Ä–∞–Ω –∞–ª—å–±–æ–º: {len(media)} –º–µ–¥–∏–∞")

    if not media:
        try:
            await messages[-1].reply_text("‚ùå –ê–ª—å–±–æ–º –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ).")
        except:
            pass
        return

    try:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞ –∏–∑ {len(media)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª")
        await context.bot.send_media_group(chat_id=CHANNEL_ID, media=media)
        await messages[-1].reply_text("‚úÖ –ê–ª—å–±–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞ {group_id}: {e}", exc_info=True)
        try:
            await messages[-1].reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª—å–±–æ–º. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∏–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        except:
            pass


# === –ó–ê–ü–£–°–ö ===
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("pin", pin))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling(drop_pending_updates=True)


if __name__ == '__main__':
    main()
